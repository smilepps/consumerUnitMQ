<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'old_sound_rabbit_mq.emailing_consumer' shared service.

include_once $this->targetDirs[3].'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/BaseAmqp.php';
include_once $this->targetDirs[3].'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/DequeuerInterface.php';
include_once $this->targetDirs[3].'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/BaseConsumer.php';
include_once $this->targetDirs[3].'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/Consumer.php';
include_once $this->targetDirs[3].'/vendor/php-amqplib/rabbitmq-bundle/RabbitMq/ConsumerInterface.php';
include_once $this->targetDirs[3].'/src/Consumer/EmailService.php';

$this->services['old_sound_rabbit_mq.emailing_consumer'] = $instance = new \OldSound\RabbitMqBundle\RabbitMq\Consumer(($this->services['old_sound_rabbit_mq.connection.default'] ?? $this->load('getOldSoundRabbitMq_Connection_DefaultService.php')));

$instance->setExchangeOptions(array('name' => 'emails', 'type' => 'direct', 'passive' => false, 'durable' => true, 'auto_delete' => false, 'internal' => false, 'nowait' => false, 'declare' => true, 'arguments' => NULL, 'ticket' => NULL));
$instance->setQueueOptions(array('name' => 'emails', 'passive' => false, 'durable' => true, 'exclusive' => false, 'auto_delete' => false, 'nowait' => false, 'declare' => true, 'arguments' => NULL, 'ticket' => NULL, 'routing_keys' => array()));
$instance->setCallback(array(0 => new \App\Consumer\EmailService(($this->services['swiftmailer.mailer.default'] ?? $this->load('getSwiftmailer_Mailer_DefaultService.php'))), 1 => 'execute'));
$instance->setLogger(($this->privates['logger'] ?? $this->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger()));
if ($this->has('event_dispatcher')) {
    $instance->setEventDispatcher(($this->services['event_dispatcher'] ?? $this->getEventDispatcherService()));
}

return $instance;
